apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'


def isRunningOnTravis = System.getenv("CI") == "true" && file('../hackillinois.keystore').exists() && file('../service-account-key.p12').exists()

if (isRunningOnTravis) {
    apply plugin: 'com.github.triplet.play'
}

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "org.hackillinois.android"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 31
        versionName "2.0.1"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        release {
            if (isRunningOnTravis) {
                storeFile file("../hackillinois.keystore")
                storePassword System.getenv("keystore_password")
                keyAlias System.getenv("key_alias")
                keyPassword System.getenv("key_password")
            }
        }
    }

    buildTypes {
        release {
            applicationIdSuffix ".release"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (isRunningOnTravis) {
                signingConfig signingConfigs.release
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:3.1.0'
    implementation 'com.airbnb.android:lottie:3.3.1'
    implementation 'androidx.fragment:fragment:1.4.1'

    // Zoomable images
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'

    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Firebase notifications
//    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.firebase:firebase-database-ktx:19.2.1'

    // Room Database
    implementation 'androidx.room:room-runtime:2.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt 'androidx.room:room-compiler:2.4.1'

    // Refreshable recyclerview
    implementation 'com.dinuscxj:recyclerrefreshlayout:2.0.5'

    // Play Services
    implementation 'com.google.android.gms:play-services-maps:18.0.2'

    // QR Code Scanning + Generation
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.google.zxing:core:3.3.3'

    // Retrofit
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // kotlin coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    // Glide for fetching images
    implementation 'com.github.bumptech.glide:glide:4.11.0'
}

apply plugin: 'com.google.gms.google-services'

if (isRunningOnTravis) {
    play {
        track = "alpha"
        userFraction = 1
        serviceAccountEmail = "hackillinois-android-publishin@api-7971352790762652858-223664.iam.gserviceaccount.com"
        serviceAccountCredentials = file("../service-account-key.p12")

        resolutionStrategy = "auto"
        outputProcessor { // this: ApkVariantOutput
            versionNameOverride = "$versionNameOverride.$versionCode"
        }
    }
}
